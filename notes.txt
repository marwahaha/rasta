
important stuff that needs to be done sooner or later...
  improve errors
  improve handling of bad syntax/indentation etc.
  macro hygeine
    namespacing for everything stored in env?
      what about class names, constants and methods
    forced gensyms for locals (how?)
    substitute in special forms and macros (ie. things implemented as procs)
  resolve reader macro questions
    user-defined reader macros?
    move to Reader?
    reduce chars included in Label, to free up stuff for reader macros?
    multi-char reader macros?

standard library to write in rst
  macros for defining classes, modules & methods
  thread macro (or similar)
    % -> (initial form) (threaded form |) (where | represents) (| the position of the) (result | from the last) (form ^|)
  doto macro?
  basic comparison/arithmetic functions (so you don't have to do (1 :+ (1 :+ 1)))
  for comprehensions
  loop/recur?
  
standard library to write either in rst or rb
  modules to define head behaviour
    Chainable (default for object)
    Callable (default for proc, method and lambda)
  namespacing
    what is namespaced?
      env, context, macros?
    namespaced monkey-patching?
  convenience stuf like docs in meta-data

possible extensions
  char literals
  1 space indent for [ and {
  set literals

toolchain
  testing framework in rst
  vim syntax file
  vim indentation file
  vim repl integration
    when cursor is on a given %, execute cmd sends only that node

# HANDLE READER ERRORS MORE GRACEFULLY... currently an indent error requires a repl restart
#- improve error reporting... things should never go wrong silently.
  #- when the input is syntactically invalid (eg. unmatching []{}() chars)
  #- indentation error
  #- show short stack trace
#
#
# load standard library in rasta on boot
#
## Using rasta from ruby
# find a way to load stuff written in rasta into ruby
# this requires a method that imports ruby and rasta equivalently
#
## SOLVING SYMBOL CAPTURE
# make it imposible to use define outside the top scope
# check for un-resolvable Labels before adding a form to defs
# add a namespace property to Labels and qualify them when expanding macros
#
# use @ for namespacing ?
#   namespacing should be as flexible as everything else. Programmer should have control to use it any way he likes...
#     name spaces can be organised according to class
#     you can import/refer namespaces into another namespace, 
#     or you can associate namespaces with a class, so they are accessible from inside the classes context

# FIND A WAY TO IMPLEMENT SCOPED MONKEY PATCHING... That way you can redefine a type's call method, without having to lose the method sending aspect throughout your code base

# make it impossible to add reader macros for two reasons:
#   the usefulness is limited since they can only be a single character long at the moment and almost all of the characters are in use
#   same arguments as with clojure... it'd make the code almost unreadable to a new person

